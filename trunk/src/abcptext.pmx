/*
**  (C) by Remo Dentato (rdentato@gmail.com)
**
** This software is distributed under the terms of the BSD license:
**   http://creativecommons.org/licenses/BSD/
**   http://opensource.org/licenses/bsd-license.php
*/

#include "abcp_priv.h"

char *abcAnnotationTextStart(abcScanner *scn)
{
  if (abcToken(scn) != T_ANNOTATION) return utlEmptyString;
  if (abcTokenLen(scn,4) == 0) return utlEmptyString;
  return abcTokenStart(scn,4);
}

int abcAnnotationTextLen(abcScanner *scn)
{
  if (abcToken(scn) != T_ANNOTATION) return 0;
  return abcTokenLen(scn,4);
}

float abcAnnotationPosX(abcScanner *scn)
{
  if (abcToken(scn) != T_ANNOTATION) return 0.0;
  if (abcTokenLen(scn,2) == 0) return 0.0;
  return atof(abcTokenStart(scn,2));
}

float abcAnnotationPosY(abcScanner *scn)
{
  if (abcToken(scn) != T_ANNOTATION) return 0.0;
  if (abcTokenLen(scn,3) == 0) return 0.0;
  return atof(abcTokenStart(scn,3));
}

char abcAnnotationPos(abcScanner *scn)
{
  if (abcToken(scn) != T_ANNOTATION) return '?';
  if (abcTokenLen(scn,1) == 0) return '?';
  return (*abcTokenStart(scn,1));
}

/*****/ 

char *abcTextStart(abcScanner *scn)
{
  switch (abcToken(scn)) {
    case T_TEXT:
    case T_ENDTEXT:
    case T_BEGINTEXT:
    case T_EMPTYLINE:
    case T_WHITESPACE:
    case T_IGNORE:
    case T_UNKNOWN:

              if (abcTokenLen(scn,2) == 0) return utlEmptyString;
              return abcTokenStart(scn,2);
  }
  return utlEmptyString;
  
  if (abcToken(scn) != T_TEXT && abcToken(scn) != T_BEGINTEXT ) return utlEmptyString;
}

int abcTextLen(abcScanner *scn)
{
  switch (abcToken(scn)) {
    case T_TEXT:
    case T_ENDTEXT:
    case T_BEGINTEXT:
    case T_EMPTYLINE:
    case T_WHITESPACE:
    case T_IGNORE:
    case T_UNKNOWN:
              return abcTokenLen(scn,2);
  }
  return 0;
  
  if (abcToken(scn) != T_TEXT && abcToken(scn) != T_BEGINTEXT ) return 0;
}

char abcTextNL(abcScanner *scn)
{
  if (abcToken(scn) != T_TEXT && abcToken(scn) != T_BEGINTEXT ) return '\0';
  return abcTokenLen(scn,3) > 0? '\n':'\0';
}

char abcTextType(abcScanner *scn)
{
/*
'\0' NONE
I inline
C comment
H History
P ps (%%beginps / %%endps)
L Limbo
B Block text (%%begintext / %%endtext)
T Text (%%text)
U Unknown
W Whitespace
X Ignore
t text
*/
  switch (abcToken(scn)) {
    case T_ENDTEXT    :
    case T_BEGINTEXT  : return toupper(*abcTokenStart(scn,1));
    case T_EMPTYLINE  :
    case T_WHITESPACE : return 'W';
    case T_IGNORE     : return 'X';
    case T_UNKNOWN    : return 'U';
    case T_TEXT       : break;
    default           : return '\0';
  }

  switch (abcCurState(scn)) {
    case S_TEXT_PS : return 'P';
    case S_TEXT    : return 'B';    
    case S_HISTORY : return 'H';
  }
  
  if (abcTokenLen(scn,1) == 0)
    return 'L';
    
  switch (*abcTokenStart(scn,1)) {
    case '%' : return 'C';
    case 'r' : return 'I'; 
  }
  
  return 't';
}

/*** DECORATION */

char *abcDecorationStart(abcScanner *scn)
{
  if (abcToken(scn) != T_DECORATION) return utlEmptyString;
  return abcTokenStart(scn,1);
}

int abcDecorationLen(abcScanner *scn)
{
  if (abcToken(scn) != T_DECORATION) return 0;
  return abcTokenLen(scn,1);
}

int abcDecorationSpan(abcScanner *scn)
{
  if (abcToken(scn) != T_DECORATION) return '?';
  if (abcTokenLen(scn,2) > 0) return *abcTokenStart(scn,2);  
  return '^';
}
