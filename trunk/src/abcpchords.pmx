/*
**  (C) by Remo Dentato (rdentato@gmail.com)
**
** This sofwtare is distributed under the terms of the BSD license:
**   http://creativecommons.org/licenses/BSD/
**   http://opensource.org/licenses/bsd-license.php
*/


#include "abcp_priv.h"

#define setstr(s,k,t,e) \
      (s)->tok_str[k][0] = t;\
      (s)->tok_str[k][1] = e;\

static void abc_chord(abcScanner *scn)
{
  char *start;
  char *end;
  int j;
  char *p,*q;
  
  start = abcTokenStart(scn,2);
  end = abcTokenEnd(scn,2);
  
  setstr(scn,2,NULL,NULL);
  setstr(scn,3,NULL,NULL); setstr(scn,4,NULL,NULL);
  setstr(scn,5,NULL,NULL); setstr(scn,6,NULL,NULL);
  
  abcSetFlag(scn,ABC_F_CHORDSCANNED); 
  
  if (start >= end) return;
  
  p=start; q = p;
  j=0;
  while (start < end && j == 0) {  
    switch pmx(start) { /* Type */   
      case "&(add":
      case "&(<!iIvVA-Ga-g\">":
      case "/<d>" :
      case "<!/&(\">":  q = pmx(End,0); break;
      default: j = 1; break;
    }
  }
  setstr(scn,2,p,q);
  if (start >= end) return;
    
  switch pmx(start) {  /* Bass */
    case "&K/(<+=IiVvA-Ga-g><?=#b>)&K": 
      setstr(scn,3,pmx(Start,1),pmx(End,1));
      break;
  }
  if (start >= end) return;
  
  /********** ALTERNATE ************/
 
  printf("{%.*s}", end-start, start);
  
  switch pmx(start) {  /* Root note */
    case "&K&((<+=A-Ga-gIiVv><?=#b>)&K": 
      setstr(scn,4,pmx(Start,1),pmx(End,1));
      break;
    default : return;
  }
  
  if (start >= end) return;
  
  p=start; q = p;
  j=0;
  while (start < end && j == 0) {  
    switch pmx(start) { /* Type */   
      case "/<d>" :
      case "&(<*!\"&)>&)" :
      case "<+!&)/\">":  q = pmx(End,0); break;
      default: j = 1; break;
    }
  }
  setstr(scn,5,p,q);
  if (start >= end) return;
    
  switch pmx(start) {  /* Bass */
    case "&K/(<+=IiVvA-Ga-g><?=#b>)&K": 
      setstr(scn,6,pmx(Start,1),pmx(End,1));
      break;
  }  
  return;
  
}

#define returnifnot(s,r)  do {\
                              if (abcToken(s) != T_GCHORD) \
                                return r;\
                              if (!abcTestFlag(scn,ABC_F_CHORDSCANNED)) \
                                abc_chord(scn);\
                            } while(utlZero)

char *abcChordRootStart(abcScanner *scn)
{
  returnifnot(scn,utlEmptyString);
  return abcTokenStart(scn,1);
}

char *abcChordTypeStart(abcScanner *scn)
{
  returnifnot(scn,utlEmptyString);
  return abcTokenStart(scn,2);
}

char *abcChordBassStart(abcScanner *scn)
{
  returnifnot(scn,utlEmptyString);
  return abcTokenStart(scn,3);
}

char *abcChordAltRootStart(abcScanner *scn)
{
  returnifnot(scn,utlEmptyString);
  return abcTokenStart(scn,4);
}

char *abcChordAltTypeStart(abcScanner *scn)
{
  returnifnot(scn,utlEmptyString);
  return abcTokenStart(scn,5);
}

char *abcChordAltBassStart(abcScanner *scn)
{
  returnifnot(scn,utlEmptyString);
  return abcTokenStart(scn,6);
}


int abcChordRootLen(abcScanner *scn)
{
  returnifnot(scn,0);
  return abcTokenLen(scn,1);
}

int abcChordTypeLen(abcScanner *scn)
{
  returnifnot(scn,0);
  return abcTokenLen(scn,2);
}

int abcChordBassLen(abcScanner *scn)
{
  returnifnot(scn,0);
  return abcTokenLen(scn,3);
}

int abcChordAltRootLen(abcScanner *scn)
{
  returnifnot(scn,0);
  return abcTokenLen(scn,4);
}

int abcChordAltTypeLen(abcScanner *scn)
{
  returnifnot(scn,0);
  return abcTokenLen(scn,5);
}

int abcChordAltBassLen(abcScanner *scn)
{
  returnifnot(scn,0);
  return abcTokenLen(scn,6);
}

  
