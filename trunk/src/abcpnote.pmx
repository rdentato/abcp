/* 
**  (C) by Remo Dentato (rdentato@gmail.com)
** 
** This software is distributed under the terms of the BSD license:
**   http://creativecommons.org/licenses/BSD/
**   http://opensource.org/licenses/bsd-license.php 
*/

#include <ctype.h>
#include "abcp_priv.h"



#define getfraction(s,n) abc_getfraction(abcTokenStart(s,n),   \
                                        abcTokenLen(s,n),     \
                                        abcTokenStart(s,n+1), \
                                        abcTokenLen(s,n+1),   \
                                        abcTokenStart(s,n+2), \
                                        abcTokenLen(s,n+2)) 


char *abcNoteAccidentalStart(abcScanner *scn)
{
  if (abcToken(scn) != T_NOTE) return utlEmptyString;
  return abcTokenStart(scn,1);
}

int abcNoteAccidentalLen(abcScanner *scn)
{
  if (abcToken(scn) != T_NOTE) return 0;
  return abcTokenLen(scn,1);
}

int abcNoteAccidentalCourtesy(abcScanner *scn) 
{
  if (abcToken(scn) != T_NOTE) return 0;
  if (*abcTokenStart(scn,0) != '(') return 0;
  return 1;
}

float abcNoteDuration(abcScanner *scn)
{
  if (abcToken(scn) != T_NOTE) return 1.0;
  return getfraction(scn,4);
}

int abcNoteOctave(abcScanner *scn)
{
  int oct = 4;
  int k;
  char *p;
    
  if (abcToken(scn) != T_NOTE) return 0;
  
  if (islower(*abcTokenStart(scn,2))) 
    oct++; 
    
  p = abcTokenStart(scn,3);
  k = abcTokenLen(scn,3);
  while (k-- > 0) {
    switch (*p++) {
      case '\'' : oct++; break;
      case ','  : oct--; break;
    }
  } 
  return oct;
}

char abcNote(abcScanner *scn)
{
  if (abcToken(scn) != T_NOTE) return '\0';
  return toupper(*abcTokenStart(scn,2));
}

float abcNoteCents(abcScanner *scn)
{
  float cents;
  cents = abcNoteBending(scn);
  if (cents == abcNatural)
      cents = 0.0; 
  return cents ; 
}

static float abc_bend;
static float abc_num;
static float abc_den;

float abc_notebending(char *acc,int len)
{
  float bend = 0.0;
  float frac;
  char *p,*q=NULL;

  abc_bend = 0.0;
  abc_num  = 0.0;
  abc_den  = 0.0;

  if (len > 0) {     
    p = acc;
    if (*p == '=') {
      if (len == 1) bend = abcNatural;
      else do {
        switch (*++p) {
          case '+' : bend +=   21.506290; break;
          case '-' : bend +=  -21.506290; break;
          case '>' : bend +=   53.272943; break;
          case '<' : bend +=  -53.272943; break;
          case '@' : bend +=   27.264092; break;
          case '*' : bend +=  -27.264092; break;
          case 'm' : bend +=   65.337341; break;
          case 'w' : bend +=  -65.337341; break;
          case 'n' : bend +=  104.955410; break;
          case 'v' : bend += -104.955410; break;
          case ']' : bend +=   93.603014; break;
          case '[' : bend +=  -93.603014; break;
          case '}' : bend +=   73.680654; break;
          case '{' : bend +=  -73.680654; break;
          case '^' : bend +=  100.000000; break;
          case '_' : bend += -100.000000; break;
          case '\'': bend +=   12.500000; break;
          case ',' : bend +=  -12.500000; break;
          case '|' : bend +=   16.666667; break;
          case '!' : bend +=  -16.666667; break;
          case 'p' : bend +=    5.000000; break;
          case 'q' : bend +=   -5.000000; break;
          case '\\': 
          case '/' : frac = 50.0;
                     while (len>2 && *p == p[1]) {
                       frac /= 2.0; len--; p++;
                     }
                     if (*p == '\\') frac = -frac;
                     bend +=   frac;
                     break;
        }
      } while (--len > 1) ;
    }
    else {
      while (len > 0) {
        if (*p == '^') bend += 100;
        else if (*p == '_') bend -= 100;
        else break;
        q=p; p++; len--;
      }
      if (len > 0) {
        switch pmx(p) {
          case "(&F)(<*=/>)(&F)" :
            frac = abc_getfraction(pmx(Start,1),pmx(Len,1),
                                   pmx(Start,2),pmx(Len,2),
                                   pmx(Start,3),pmx(Len,3));
            if (pmx(Len,2) != 0) frac *= 100;
            if (pmx(Len,1) > 0) abc_num = atof(pmx(Start,1));
            if (pmx(Len,3) > 0) abc_den = atof(pmx(Start,3));
            if (q) {
              switch (*q) {
                case '^' : bend -= 100; break;
                case '_' : bend += 100;
                           frac *= -1;
                           abc_num *= -1; 
                           break;
              }
            }
            bend += frac;
            break;
        }
      }
    }
  }      
  abc_bend = bend;                   
  return bend;
}


float abcNoteBending(abcScanner *scn)
{
  if (abcToken(scn) != T_NOTE) return 0.0;
 
  if (!abcTestFlag(scn, ABC_F_BENDCOMPUTED)) {  
    abcSetFlag(scn,ABC_F_BENDCOMPUTED);
    abc_bend = abc_notebending(abcTokenStart(scn,1), abcTokenLen(scn,1)) ;
  }
  return abc_bend;
}

float abcNoteMicrotoneNum(abcScanner *scn)
{
  if (abcToken(scn) != T_NOTE) return 0.0;
 
  if (!abcTestFlag(scn, ABC_F_BENDCOMPUTED)) {  
    abcSetFlag(scn,ABC_F_BENDCOMPUTED);
    abc_bend = abc_notebending(abcTokenStart(scn,1), abcTokenLen(scn,1)) ;
  }
  return abc_num;
}

float abcNoteMicrotoneDen(abcScanner *scn)
{
  if (abcToken(scn) != T_NOTE) return 0.0;
 
  if (!abcTestFlag(scn, ABC_F_BENDCOMPUTED)) {  
    abcSetFlag(scn,ABC_F_BENDCOMPUTED);
    abc_bend = abc_notebending(abcTokenStart(scn,1), abcTokenLen(scn,1)) ;
  }
  return abc_den;
}

unsigned short abcNote2Midi(char pitch, int octave, int acc)
{
  int n;
  n = abcSemitones[abcNote2Num(pitch)] - 1 + acc;
  n += 12 * octave;
  while (n>127) n -= 12;
  while (n<0) n += 12;
  return n;
}

unsigned short abcNoteMidi(abcScanner *scn)
{
  if (abcToken(scn) != T_NOTE) return 0;
  return abcNote2Midi(*abcTokenStart(scn,2),
                       abcNoteOctave(scn)+1,
                 (int)(abcNoteCents(scn)/100.0));
 }

unsigned short abcNoteMidiPitchBend(abcScanner *scn)
{
  float bend;
  if (abcToken(scn) != T_NOTE) return 0;
  
  bend =  abcNoteCents(scn)/100;
  return (8192 + (int)(8192.0 * (bend - trunc(bend))));
}


unsigned short abcRestInvisible(abcScanner *scn)
{
  if (abcToken(scn) != T_REST) return 1;
  return (*abcTokenStart(scn,1) == 'x'); 
}

unsigned short abcRestMultimeasure(abcScanner *scn)
{
  if (abcToken(scn) != T_REST) return 0;
  return (*abcTokenStart(scn,1) == 'Z'); 
}

float abcRestDuration(abcScanner *scn)
{
  if (abcToken(scn) != T_REST) return 1;
  return getfraction(scn,2);
}

/*************/

char *abcBarStart(abcScanner *scn)
{
  if (abcToken(scn) != T_BAR) return utlEmptyString;
  if (abcTokenLen(scn,3) == 0) return utlEmptyString;
  return abcTokenStart(scn,3);
}

int abcBarLen(abcScanner *scn)
{
  if (abcToken(scn) != T_BAR) return 0;
  return abcTokenLen(scn,3);
}

int abcBarDotted(abcScanner *scn)
{ 
  if (abcToken(scn) != T_BAR) return 0;
  if (abcTokenLen(scn,2) > 0) return 1;
  if (abcTokenLen(scn,3) == 0 && abcTokenLen(scn,1) & 1) return 1;
  return 0;
}

int abcBarInvisible(abcScanner *scn)
{
  char *b;
  int l;
  
  if (abcToken(scn) != T_BAR) return 1;
  l = abcTokenLen(scn,3);
  b = abcTokenStart(scn,3);
  if (b[1] == '[') {
    if (l == 2 && b[1] == ']') return 1;
    if (l == 3 && b[1] == '|' && b[2] == ']') return 1;
  }
  else if (l == 1 && b[0] == ']') return 1;
  return 0;
}

int abcBarRepeatBefore(abcScanner *scn)
{
  if (abcToken(scn) != T_BAR) return 0;
  if (abcTokenLen(scn,2) > 0 || abcTokenLen(scn,3) > 0) 
    return abcTokenLen(scn,1);
  else 
    return abcTokenLen(scn,1) / 2;
}

int abcBarRepeatAfter(abcScanner *scn)
{
  if (abcToken(scn) != T_BAR) return 0;
  if (abcTokenLen(scn,2) > 0 || abcTokenLen(scn,3) > 0) 
    return abcTokenLen(scn,4);
  else 
    return abcTokenLen(scn,1) / 2;
}

int abcBarEnding(abcScanner *scn)
{
  if (abcToken(scn) != T_ENDING) return 0;
  return atoi(abcTokenStart(scn,2));
}

char *abcBarEndingStart(abcScanner *scn)
{
  if (abcToken(scn) != T_ENDING) return utlEmptyString;
  return abcTokenStart(scn,2);
}

int abcBarEndingLen(abcScanner *scn)
{
  if (abcToken(scn) != T_ENDING) return 0;
  return abcTokenLen(scn,2);
}

/*** Broken rythm */

int abcBroken(abcScanner *scn)
{
  if (abcToken(scn) != T_BROKENLEFT && abcToken(scn) != T_BROKENRIGHT)
     return 0;
  return abcTokenLen(scn,0);
}

/*** Chord */

float abcChordDuration(abcScanner *scn)
{
  if (abcToken(scn) != T_CHORDEND) return 1;
  return getfraction(scn,1);
}

/*** Overlay */

int abcOverlay(abcScanner *scn)
{
  if (abcToken(scn) != T_OVLRESET  && abcToken(scn) != T_OVLSTART   && abcToken(scn) != T_OVLEND)
     return 0;
  return abcTokenLen(scn,1);
}

/** slur and tie */

char abcSlurDirection(abcScanner *scn)
{
  if ((abcToken(scn) != T_SLURSTART && abcToken(scn) != T_SLUREND) ||
      abcTokenLen(scn,2) == 0) return '-';
  return *abcTokenStart(scn,2);
}

char abcTieDirection(abcScanner *scn)
{
  if (abcToken(scn) != T_TIE || abcTokenLen(scn,2) == 0) return '-';
  return *abcTokenStart(scn,2);
}

int abcSlurDotted(abcScanner *scn)
{
  if (abcToken(scn) != T_SLURSTART && abcToken(scn) != T_SLUREND) return 0;
  return (abcTokenLen(scn,1) > 0);
}

int abcTieDotted(abcScanner *scn)
{
  if (abcToken(scn) != T_TIE) return 0;
  return (abcTokenLen(scn,1) > 0);
}

/** TUPLET */

int abcTuplet(abcScanner *scn)
{
  if (abcToken(scn) != T_TUPLET) return 0;
  return atoi(abcTokenStart(scn,1));
}

int abcTupletTime(abcScanner *scn)
{
  if (abcToken(scn) != T_TUPLET || abcTokenLen(scn,2)==0) return 0;
  return atoi(abcTokenStart(scn,2));
}

int abcTupletNext(abcScanner *scn)
{
  if (abcToken(scn) != T_TUPLET || abcTokenLen(scn,3)==0) return 0;
  return atoi(abcTokenStart(scn,3));
}

