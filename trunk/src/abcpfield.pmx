/*
**  (C) by Remo Dentato (rdentato@gmail.com)
**
** This software is distributed under the terms of the BSD license:
**   http://creativecommons.org/licenses/BSD/
**   http://opensource.org/licenses/bsd-license.php
*/

#include "abcp_priv.h"

char *abcFieldStart(abcScanner *scn)
{
  if (abcToken(scn) != T_FIELD ) return utlEmptyString;
  return abcTokenStart(scn,3);
}

int abcFieldLen(abcScanner *scn)
{
  if (abcToken(scn) != T_FIELD) return 0;
  return abcTokenLen(scn,3);  
}

char abcField(abcScanner *scn) 
{
  char c = '?';
  if (abcToken(scn) == T_FIELD) {
    c = *abcTokenStart(scn,2);
    if (c=='%') c='I';
  }
  return c;
}

char *abcFieldNameStart(abcScanner *scn)
{
  char c;
  if (abcToken(scn) != T_FIELD ) return utlEmptyString;
  c = abcField(scn);
  if (c == 'I') return abcTokenStart(scn,4); 
  return abcTokenStart(scn,2);
}

int abcFieldNameLen(abcScanner *scn)
{
  if (abcToken(scn) != T_FIELD) return 0;
  if (abcField(scn) == 'I') return abcTokenLen(scn,4); 
  return 1;
}

/*
   M: none
   M: free 
   M: (2+2+3)/8
   M: C
   M: C|

   <?=(>(<+= 0-9+>)<?=)>&K<?=/>&K(<*d>)   
   
*/
#define MAXBEATS 30
#define beatsum beats[MAXBEATS+1]
#define units beats[MAXBEATS+2]

static char beats[MAXBEATS+3];

static void abc_meter(abcScanner *scn)
{
  char *p;
  int k;
  int i;
   
  for (i=0; i < MAXBEATS; i++) 
    beats[i] = 0;
    
  beatsum = 0;  
  units = 0;

  i = 0;
  p = abcFieldStart(scn);
  k = abcFieldLen(scn);
  while (k>0) {
     switch pmx(p) {
        case "&k" :
          k -= pmx(Len,0);
          break;
          
        case "C|" :
          beatsum = 2; beats[0] = 2; beats[1] = 0;
          units = 2;
          k = 0;
          break;
          
        case "C" :
          beatsum = 4; beats[0] = 4; beats[1] = 0;
          units = 2;
          k = 0;
          break;
          
        case "none&|free" :
          beatsum = 1; beats[0] = 1; beats[1] = 0;
          units = 1;
          k = 0;
          break;
          
        case "&d&K" :
          beats[i] = atoi(pmx(Start,0));
          beatsum += beats[i];
          if (i<MAXBEATS) i++;
          beats[i] = 0;   
          k -= pmx(Len,0);
          break;
          
        case "/&K(&d)" :
          units = atoi(pmx(Start,1));
          k = 0;
          break;
             
        case "<.>&K" :
          k -= pmx(Len,0);
          break;
     } 
  }

}

#if 0
char *abcMeterStart(abcScanner *scn)
{
  
}

int abcMeterLen(abcScanner *scn)
{
  
}
#endif

int abcMeterUnits(abcScanner *scn)
{
  if (abcToken(scn) != T_FIELD || abcField(scn) != 'M') return 0;
  
  if (!abcTestFlag(scn,ABC_F_FIELDSCANNED)) 
    abc_meter(scn);

  return units;
}

int abcMeterBeatsNth(abcScanner *scn, int k)
{
  if (abcToken(scn) != T_FIELD || abcField(scn) != 'M') return 0;
  
  if (k >= MAXBEATS) return 0;
  
  if (!abcTestFlag(scn, ABC_F_FIELDSCANNED))  
    abc_meter(scn);
  
  return beats[k];
}
