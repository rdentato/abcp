/*
**  (C) by Remo Dentato (rdentato@gmail.com)
**
** This sofwtare is distributed under the terms of the BSD license:
**   http://creativecommons.org/licenses/BSD/
**   http://opensource.org/licenses/bsd-license.php
*/


#include "abcp_priv.h"
#include <assert.h>

abcScanner *abc_newscanner(char *text,char how)
{
  abcScanner *scn=NULL;
  FILE *f = NULL;

  if ((how == 'F') && !(f = fopen(text,"r"))) return NULL;

  if ((scn = malloc(sizeof(abcScanner)))) {
    scn->tok = T_NONE;
    scn->state = S_LIMBO;
    scn->nextstate = S_NONE;
    scn->prevstate = S_NONE;
    scn->lnumber = 0;
    scn->ln_logical = 0;
    scn->abc = NULL;
    scn->file = NULL;
    scn->line = NULL;
    scn->cur = NULL;
    scn->tmpbuf = NULL;
    scn->saved = NULL;
    scn->incpath = NULL;

    switch (how) {
      case 'F' : scn->file = f; break;
      case 'S' : scn->abc = text; break;
      default : free(scn); return (NULL);
    }

    scn->pos = scn->abc;
  }
  return scn;
}


abcScanner *abcScannerFree(abcScanner *scn)
{
  abcScanner *tmp;
  while (scn) {
    if (scn->file) fclose(scn->file);
    if (scn->line) chsFree(scn->line);
    if (scn->tmpbuf) chsFree(scn->tmpbuf);
    if (scn->incpath) chsFree(scn->incpath);
    tmp = scn;
    scn = scn->saved;
    free(tmp);
  }
  return NULL;
}


static void nextline(abcScanner *scn)
{
  char *t;
  int l = 0;;

  if (scn->file != NULL) {
    l = chsLen(scn->line);
    scn->line = chsReadln(scn->line,scn->file,'a');
    l = chsLen(scn->line) - l;
  }
  else {
    t = scn->pos;
    l = 1;
    while (l && *t) {
      switch pmx(t) {
        case "&n" : l = 0;
        case "&l" : break;
        default : assert(0);
      }
    }
    l = t - scn->pos;
    if (l > 0) {
      _dbgmsg("LEN: %d\n",l);
      scn->line = chsAddStrL(scn->line,scn->pos,l);
      scn->pos = t;
    }
  }
  if (l > 0) scn->lnumber++;
}

static int chk_tocontinue(char *s)
{
  if (*s == '\b') s++;
  while (*s && isspace(*s)) s++;
  if (*s == '%' || *s == '#') return 1;
  if (!isalpha(*s) || *s=='w' || *s=='s') return 0;
  return (s[1] == ':');
}

/* Handling line continuation is rather messy in ABC. Here are the rules
** that have been implemented.
**
**   - Backslash and % in quoted strings are preserved
**   - Escaped backslash and % are preserved
**   - If a line ends with "\ %..." it's transformed in "[r:...]\"
**   - If line starts with a field (X: or %%) or a comment is to be continued
**   - In state LIMBO any lines is to be continued
**   - In any other state the \ at the end is reported as T_CONTINUE token
**
*/

static void getnewline(abcScanner *scn)
{
  char *t,*q;
  int   len;
  int   k;
  chs_t tmp = NULL;
  int   tocontinue = -1;

  scn->line = chsCpy(scn->line,"\b");
  scn->ln_logical = scn->lnumber+1;

  for (;;) {
    len = chsLen(scn->line);
    nextline(scn);
    k = chsLen(scn->line);
    if (len == k) break;

    if (tocontinue < 0)
      tocontinue = chk_tocontinue(scn->line);

    if (chsChrAt(scn->line,-1) != '\n')
      scn->line = chsAddChr(scn->line,'\n');

    q = scn->line + len;
    t = NULL;
    while (*q && !t) {
      switch pmx(q) {
         case "&e\\&q"        : break;  /* skip quoted strings */
         case "&K%"           : tocontinue = 1; /* comments are always continued */
                                break;
         case "\\&K&n"        :
         case "\\&K%&K(&L)&n" :       /* got a ending remark */
                                len = pmx(Len,1);
                                if (len>0) {
                                  tmp = chsCpy(tmp,"[r:");
                                  tmp = chsAddStrL(tmp, pmx(Start,1),len);
                                  tmp = chsAddStr(tmp, "]");
                                }
                                else {
                                  tmp = chsCpy(tmp,"");
                                }
                                scn->line = chsDel(scn->line,-pmx(Len,0),-1);
                                scn->line = chsAddStr(scn->line, tmp);
                                scn->line = chsAddStr(scn->line, "\f");
                                t = scn->line;
                                break;
         case "\\<.>"         :
         case "<!\\\">"       : break;
      }
    }
    if (t == NULL)              break; /* didn't continue at all */
    if (scn->state == S_LIMBO)  continue;
    if (!tocontinue)            break;
  }

  if (chsLen(scn->line) < 2)
    scn->line = chsCpy(scn->line,"");
  else if (chsChrAt(scn->line,-1) != '\n')
    scn->line = chsAddChr(scn->line,'\n');

  scn->cur = scn->line;
  _dbgmsg("line: <<%s>>\n",scn->line);
  if (tmp) chsFree(tmp);
}


/* **************** */

#define adjustdeco() \
                    if (abcTokenLen(scn,1)>1) {\
                      switch(abcTokenStart(scn,1)[abcTokenLen(scn,1)-1]) {\
                        case '(': case ')' :\
                           scn->tok_str[2][1] = scn->tok_str[1][1]--;\
                           scn->tok_str[2][0] = scn->tok_str[1][1]; \
                           break;\
                        default : break;\
                      }\
                    }\

#define settoken(s,t) do { \
    int k;\
    (s)->tok = (t);\
    for (k = 0; k < abc_PMXCAPT; k++) {\
      (s)->tok_str[k][0] = pmx(Start,k);\
      (s)->tok_str[k][1] = pmx(End,k);\
      if ((s)->tok_str[k][0] > (s)->tok_str[k][1])\
        (s)->tok_str[k][1] = (s)->tok_str[k][0] ;  \
    } \
    if ((s)->tok_str[0][0][0] == '\b')\
      (s)->tok_str[0][0]++;   \
  } while(utlZero)


#define stategoto(scn,st)  (((scn)->prevstate = S_NONE), \
                            ((scn)->nextstate = st))

#define stategosub(scn,st) (((scn)->prevstate = (scn)->state),\
                            ((scn)->nextstate = st))

#define statereturn(scn)      (((scn)->nextstate = (scn)->prevstate), \
                               ((scn)->prevstate = S_NONE))

static abcToken abc_lyrics(abcScanner *scn)
{
  skip_token:
  switch pmx(scn->cur) {

    case "\b()(<*= \t\f>)&n" :
                    settoken(scn,T_EMPTYLINE);
                    stategoto(scn,S_LIMBO);
                    break;

    case "\b&K%%&K(t)ext&K(&L)(&n)" :
                    settoken(scn,T_TEXT);
                    break;

    case "\b&K%%&Kbegin(ps)&K(&L)(&n)" :
                    settoken(scn,T_BEGINTEXT);
                    stategosub(scn,S_TEXT_PS);
                    break;

    case "\b&K%%&K(begintext)&K(&L)(&n)" :
                    settoken(scn,T_BEGINTEXT);
                    stategosub(scn,S_TEXT);
                    break;

    case "\b&K(%)(%)&K((<+S>)&K(&L))&n" :
                    settoken(scn,T_FIELD);
                    break;

    case "\b()(&Kw:&K)" :
                    settoken(scn,T_IGNORE);
                    break;

    case "\b&K(H):" :
                    settoken(scn,T_BEGINTEXT);
                    stategosub(scn,S_HISTORY);
                    break;

    case "\b&K()(I):&K((<*S>)&K(&L))&n" :
    case "\b&K()(U):&K((<.>)&K=&K&e\\(&q)&L)&n" :
    case "\b&K()(U):&K((<.>)&K=&K(<+S>)&L)&n" :
    case "\b&K()(<a>):&K(&L)&n" :
                    settoken(scn,T_FIELD);
                    break;

    case "\b&K#(<+S>)&K(&L)&n" :
                    settoken(scn,T_PRAGMA);
                    break;

    case "\b" :     goto skip_token;

    case "()(<+=`>)" :  settoken(scn,T_IGNORE);
                    break;

    case "()(&k)"  :    settoken(scn,T_WHITESPACE);
                    break;

    case "\f&N" :   settoken(scn,T_CONTINUE);
                    break;

    case "&n" :     settoken(scn,T_ENDLINE);
                    stategoto(scn,S_TUNE);
                    break;

    case "&((<+=&&>)" :
                    settoken(scn,T_OVLSTART);
                    break;

    case "(<+=&&>)&)" :
                    settoken(scn,T_OVLEND);
                    break;

    case "(<+=&&>)" :
                    settoken(scn,T_OVLRESET);
                    break;

    case "(%)&K(&L)(&n)"  :
    case "[(r):&K&e\\(<+#]>)]" :
                    settoken(scn,T_TEXT);
                    break;

    case "([)(U):&K&e\\((<.>)&K=&K(<+#]>))]" : 
    case "([)(<a>):&K&e\\(<+#]>)]" :
                    settoken(scn,T_FIELD);
                    break;

    case "()()(|)" :settoken(scn,T_LYRBAR);
                    break;


    case "(<+d>)(<=.):&->)"  :
                    settoken(scn,T_VERSE);
                    break;

    case "*" :
    case "&e\\(<?=&->)(<*# \f\b\t\r\n*_&->)(<*=_>)" :
                    settoken(scn,T_SYLLABLE);
                    break;

    case "()(<.>)" :    settoken(scn,T_UNKNOWN);
                    break;
  }

  return scn->tok;
}

static abcToken abc_symbols(abcScanner *scn)
{ 
  skip_token:
  switch pmx(scn->cur) {

    case "\b()(<*= \t\f>)&n" :
                    settoken(scn,T_EMPTYLINE);
                    stategoto(scn,S_LIMBO);
                    break;

    case "\b&K%%&K(t)ext&K(&L)(&n)" :
                    settoken(scn,T_TEXT);
                    break;

    case "\b&K%%&Kbegin(ps)&K(&L)(&n)" :
                    settoken(scn,T_BEGINTEXT);
                    stategosub(scn,S_TEXT_PS);
                    break;

    case "\b&K%%&K(begintext)&K(&L)(&n)" :
                    settoken(scn,T_BEGINTEXT);
                    stategosub(scn,S_TEXT);
                    break;

    case "\b&K(%)(%)&K((<+S>)&K(&L))&n" :
                    settoken(scn,T_FIELD);
                    break;

    case "\b()(&Ks:&K)" :
                    settoken(scn,T_IGNORE);
                    break;

    case "\b&K(H):" :
                    settoken(scn,T_BEGINTEXT);
                    stategosub(scn,S_HISTORY);
                    break;

    case "\b&K()(I):&K((<*S>)&K(&L))&n" :
    case "\b&K()(U):&K((<.>)&K=&K&e\\(&q)&L)&n" :
    case "\b&K()(U):&K((<.>)&K=&K(<+S>)&L)&n" :
    case "\b&K()(<a>):&K(&L)&n" :
                    settoken(scn,T_FIELD);
                    break;

    case "\b&K#(<+S>)&K(&L)&n" :
                    settoken(scn,T_PRAGMA);
                    break;

    case "\b" :     goto skip_token;

    case "()(<+=`>)" :  settoken(scn,T_IGNORE);
                    break;

    case "()(&k)"  :    settoken(scn,T_WHITESPACE);
                    break;

    case "\f&K&N" : settoken(scn,T_CONTINUE);
                    break;

    case "&n" :     settoken(scn,T_ENDLINE);
                    stategoto(scn,S_TUNE);
                    break;

    case "[(r):&K&e\\(<+#]>)]" :
    case "(%)&K(&L)(&n)"  :
                    settoken(scn,T_TEXT);
                    break;

    case "&((<+=&&>)" :
                    settoken(scn,T_OVLSTART);
                    break;

    case "(<+=&&>)&)" :
                    settoken(scn,T_OVLEND);
                    break;

    case "(<+=&&>)" :
                    settoken(scn,T_OVLRESET);
                    break;

    case "([)(U):&K&e\\((<.>)&K=&K(<+#]>))]" : 
    case "([)(<a>):&K&e\\(<+#]>)]" :
                    settoken(scn,T_FIELD);
                    break;

    case "()()(|)" :settoken(scn,T_SYMBAR);
                    break;

    case "\"(<+=iv><*=#b>)(<*!\">)\"(<*=',>)" :
    case "\"(<+=IV><*=#b>)(<*!\">)\"(<*=',>)" :
    case "\"(<=A-Ga-g><*=#b>)(<*!\">)\"(<*=',>)" :
                    settoken(scn,T_GCHORD);
                    break;

    case "&e\\\"(@)(&F)<?=,>(&F)(<+#\">)\"" :
    case "&e\\\"(<?=&<&>^_>)()()(<+#\">)\"" :
                    settoken(scn,T_ANNOTATION);
                    break;

    case "(((<=.H-Wh-w~>)))" :
                    settoken(scn,T_USERSYMBOL);
                    break;

    case "(*)" :
    case "+(<+!=+ \f\t\n\r|[:]>)+":
    case "!(<+!=! \f\t\n\r|[:]>)!":
                    settoken(scn,T_DECORATION);
                    adjustdeco();
                    break;

    case "()(<.>)" :    settoken(scn,T_UNKNOWN);
                    break;
  }

  return scn->tok;
}

static abcToken abc_tune(abcScanner *scn)
{
  skip_token:
  switch pmx(scn->cur) {
    case "\b&Kw:&K" :
                    settoken(scn,T_LYRICS);
                    stategoto(scn,S_LYRICS);
                    break;

    case "\b&Ks:&K" :
                    settoken(scn,T_SYMBOLS);
                    stategoto(scn,S_SYMBOLS);
                    break;

    case "\b&K%%&K(t)ext&K(&L)(&n)" :
                    settoken(scn,T_TEXT);
                    break;

    case "\b&K%%&Kbegin(ps)&K(&L)(&n)" :
                    settoken(scn,T_BEGINTEXT);
                    stategosub(scn,S_TEXT_PS);
                    break;

    case "\b&K%%&K(begintext)&K(&L)(&n)" :
                    settoken(scn,T_BEGINTEXT);
                    stategosub(scn,S_TEXT);
                    break;

    case "\b&K%%&K<?$abc->includepath&k(<?=+>)&K&e\\(&q)&L&n" :
                    settoken(scn,T_INCLUDEPATH);
                    break;

    case "\b&K%%&K<?$abc->include&k&e\\(&q)()&K(&L)(&n)" :
    case "\b&K%%&K<?$abc->include&k()(<+S>)&K(&L)(&n)" :
                    settoken(scn,T_INCLUDE);
                    break;

    case "\b&K(%)(%)&K((<+S>)&K(&L))&n" :
                    settoken(scn,T_FIELD);
                    break;

    case "\b&K(H):" :
                    settoken(scn,T_BEGINTEXT);
                    stategosub(scn,S_HISTORY);
                    break;

    case "\b&K()(I):&K((<*S>)&K(&L))&n" :
    case "\b&K()(U):&K((<.>)&K=&K&e\\(&q)&L)&n" :
    case "\b&K()(U):&K((<.>)&K=&K(<+S>)&L)&n" :
    case "\b&K()(<a>):&K(&L)&n" :
                    settoken(scn,T_FIELD);
                    break;

    case "\b()(<*= \t\f>)&n" :
                    settoken(scn,T_EMPTYLINE);
                    stategoto(scn,S_LIMBO);
                    break;

    case "\b&K#(<+S>)&K(&L)&n" :
                    settoken(scn,T_PRAGMA);
                    break;

    case "\b" :     goto skip_token;

    case "&n" :     settoken(scn,T_ENDLINE);
                    break;

    case "()(<+=`>)" :  settoken(scn,T_IGNORE);
                    break;

    case "()(&k)" : settoken(scn,T_WHITESPACE);
                    break;

    case "[(r):&K&e\\(<+#]>)]" :
    case "(%)&K(&L)(&n)" :
                    settoken(scn,T_TEXT);
                    break;

    case "<?=&(>(=<*!A-Ga-g0-9&->)(&F)(<*=/>)(&F)<?=&)>(<=A-Ga-g>)(<*=,'>)(<*d>)(<*=/>)(<*d>)" :
    case "<?=&(>(<+=^_>)(&F)(<*=/>)(&F)<?=&)>(<=A-Ga-g>)(<*=,'>)(<*d>)(<*=/>)(<*d>)" :
/*    case "(<*=^_=>)(&F)(<*=/>)(&F)(<=A-Ga-g>)(<*=,'>)(<*d>)(<*=/>)(<*d>)" */
                    settoken(scn,T_NOTE);
                    if (pmx(Start,0) == '(' && pmx(End,1) == ')')
                      scn->tok_str[1][1]--;
                    break;

    case "(<=Zzx>)(<*d>)(<*=/>)(<*d>)" :
                    settoken(scn,T_REST);
                    break;

    case "y(&F)" :  settoken(scn,T_SPACER);
                    break;

    case "<+=/>" :  settoken(scn,T_MEASUREREPEAT);
                    break;

    case "+(<+!=+ \f\t\n\r|[:]>)+":
    case "!(<+!=! \f\t\n\r|[:]>)!":
                    settoken(scn,T_DECORATION);
                    adjustdeco();
                    break;

    case "!" :      settoken(scn,T_BREAKLINE);
                    break;

    case "([)(U):&K&e\\((<.>)&K=&K(<+#]>))]" : 
    case "([)(<a>):&K&e\\(<+#]>)]" :
                    settoken(scn,T_FIELD);
                    break;

    case "(<?=[>)(<d><*=,0-9&->)" :
    case "([)&K(&e\\&q)" :
                    if (scn->lasttok == T_BAR)
                      settoken(scn,T_ENDING);
                    else
                      settoken(scn,T_UNKNOWN);
                    break;

    case "(<?=.>)-(<?=',>)" :
                    settoken(scn,T_TIE);
                    break;

    case "&((<+d>)<?=:>(<*d>)<?=:>(<*d>)&K" :
                    settoken(scn,T_TUPLET);
                    break;

    case "&((<+=&&>)" :
                    settoken(scn,T_OVLSTART);
                    break;

    case "(<+=&&>)&)" :
                    settoken(scn,T_OVLEND);
                    break;

    case "(<+=&&>)" :
                    settoken(scn,T_OVLRESET);
                    break;

    case "(<?=.>)&((<?=',>)" :
                    settoken(scn,T_SLURSTART);
                    break;

    case "(<?=.>)&)" : 
                    settoken(scn,T_SLUREND);
                    break;

    case "(((.)))&G<!:|[]>" :
    case "(((<=H-Wh-w~>)))" :
                    settoken(scn,T_USERSYMBOL);
                    break;

    case "(<*=:>)(<?=.>)(<+=|[><+=|]>)(<*=:>)" :
    case "(<*=:>)(<?=.>)(<*=|><*=[><+=|]>)(<*=:>)" :
    case "(<*=:>)(<?=.>)(<*=|>)(<*=:>)" :
                    settoken(scn,T_BAR);
                    break;

    case "[" :      settoken(scn,T_CHORD);
                    stategosub(scn,S_CHORD);
                    break;

    case "<+=&>>" : settoken(scn,T_BROKENRIGHT);
                    break;

    case "<+=&<>" : settoken(scn,T_BROKENLEFT);
                    break;

    case "{(<?=/>)": settoken(scn,T_GRACE);
                    stategoto(scn,S_GRACE);
                    break;

    case "\f&N" :
                    settoken(scn,T_CONTINUE);
                    break;

    case "\"(<+=iv><*=#b>)(<*!\">)\"(<*=',>)" :
    case "\"(<+=IV><*=#b>)(<*!\">)\"(<*=',>)" :
    case "\"(<=A-Ga-g><*=#b>)(<*!\">)\"(<*=',>)" :
                    settoken(scn,T_GCHORD);
                    break;

    case "&e\\\"(@)(&F)<?=,>(&F)(<+#\">)\"" :
    case "&e\\\"(<?=&<&>^_>)()()(<+#\">)\"" :
                    settoken(scn,T_ANNOTATION);
                    break;

    case "()(<.>)" :    settoken(scn,T_UNKNOWN);
                    break;
  }
  
  return scn->tok;
}

static abcToken abc_limbo(abcScanner *scn)
{

  skip_token:
  switch pmx(scn->cur) {
    case "\b()(<* \t\f>)&n" :
                    settoken(scn,T_EMPTYLINE);
                    break;

    case "\b&K(H):" :
                    settoken(scn,T_BEGINTEXT);
                    stategosub(scn,S_HISTORY);
                    break;

    case "\b&K()(I):&K((<*S>)&K(&L))&n" :
    case "\b&K()(U):&K((<.>)&K=&K&e\\(&q)&L)&n" :
    case "\b&K()(U):&K((<.>)&K=&K(<+S>)&L)&n" :
    case "\b&K()(<a>):&K(&L)&n" :
                    settoken(scn,T_FIELD);
                    stategoto(scn,S_HEADER);
                    break;

    case "\b&K%%&K(t)ext&K(&L)(&n)" :
                    settoken(scn,T_TEXT);
                    break;

    case "\b&K%%&Kbegin(ps)&K(&L)(&n)" :
                    settoken(scn,T_BEGINTEXT);
                    stategosub(scn,S_TEXT_PS);
                    break;

    case "\b&K%%&K(begintext)&K(&L)(&n)" :
                    settoken(scn,T_BEGINTEXT);
                    stategosub(scn,S_TEXT);
                    break;

    case "\b&K%%&K<?$abc->includepath&k(<?=+>)&K&e\\(&q)&L&n" :
                    settoken(scn,T_INCLUDEPATH);
                    stategoto(scn,S_HEADER);
                    break;

    case "\b&K%%&K<?$abc->include&k&e\\(&q)()&K(&L)(&n)" :
    case "\b&K%%&K<?$abc->include&k()(<+S>)&K(&L)(&n)" :
                    settoken(scn,T_INCLUDE);
                    stategoto(scn,S_HEADER);
                    break;

    case "\b&K(%)(%)&K((<+S>)&K(&L))&n" :
                    settoken(scn,T_FIELD);
                    stategoto(scn,S_HEADER);
                    break;

    case "\b&K#(<+S>)&K(&L)&n" :
                    settoken(scn,T_PRAGMA);
                    break;

    case "\b" :     goto skip_token;

    case "&K([)(U):&K&e\\((<.>)&K=&K(<+#]>))]&K" : 
    case "&K([)(<a>):&K&e\\(<+#]>)]&K" :
                    if (*pmx(Start,1) == 'r')
                      settoken(scn,T_TEXT);
                    else
                      settoken(scn,T_FIELD);
                    break;

    case "&K(%)&K(&L)(&n)" :
                    settoken(scn,T_TEXT);
                    break;

    case "(&K)&n" : settoken(scn,T_WHITESPACE);
                    break;

    case "()&K(&l)(&n)" :
                    settoken(scn,T_TEXT);
                    break;
  }

  return scn->tok;
}

static abcToken abc_header(abcScanner *scn)
{
  scn->tok = T_NONE;

  skip_token:
  switch pmx(scn->cur) {
    case "\b()(<*= \t\f>)&n" :
                    settoken(scn,T_EMPTYLINE);
                    stategoto(scn,S_LIMBO);
                    break;

    case "\b&K(H):" :
                    settoken(scn,T_BEGINTEXT);
                    stategosub(scn,S_HISTORY);
                    break;

    case "\b&K()(I):&K((<*S>)&K(&L))&n" :
    case "\b&K()(U):&K((<.>)&K=&K&e\\(&q)&L)&n" :
    case "\b&K()(U):&K((<.>)&K=&K(<+S>)&L)&n" :
    case "\b&K()(<a>):&K(&L)&n" :
                    settoken(scn,T_FIELD);
                    break;

    case "\b&K%%&K(t)ext&K(&L)(&n)" :
                    settoken(scn,T_TEXT);
                    break;

    case "\b&K%%&Kbegin(ps)&K(&L)(&n)" :
                    settoken(scn,T_BEGINTEXT);
                    stategosub(scn,S_TEXT_PS);
                    break;

    case "\b&K%%&K(begintext)&K(&L)(&n)" :
                    settoken(scn,T_BEGINTEXT);
                    stategosub(scn,S_TEXT);
                    break;

    case "\b&K%%&K<?$abc->includepath&k(<?=+>)&K&e\\(&q)&L&n" :
                    settoken(scn,T_INCLUDEPATH);
                    break;

    case "\b&K%%&K<?$abc->include&k&e\\(&q)()&K(&L)(&n)" :
    case "\b&K%%&K<?$abc->include&k()(<+S>)&K(&L)(&n)" :
                    settoken(scn,T_INCLUDE);
                    break;

    case "\b&K(%)(%)&K((<+S>)&K(&L))&n" :
                    settoken(scn,T_FIELD);
                    break;

    case "\b&K#(<+S>)&K(&L)&n" :
                    settoken(scn,T_PRAGMA);
                    break;

    case "\b&K" :   goto skip_token;

    case "&K(%)&K(&L)(&n)" :
                    settoken(scn,T_TEXT);
                    break;

    case "&K([)(U):&K&e\\((<.>)&K=&K(<+#]>))]&S" : 
    case "&K([)(<a>):&K&e\\(<+#]>)]&S" :
                    if (*pmx(Start,1) == 'r')
                      settoken(scn,T_TEXT);
                    else
                      settoken(scn,T_FIELD);
                    break;
  }

  if (scn->tok == T_NONE) {
    stategoto(scn,S_TUNE);
    return abc_tune(scn);
  }

  return scn->tok;
}

static abcToken abc_grace(abcScanner *scn)
{
  switch pmx(scn->cur) {
    case "()(<+=`>)" :  settoken(scn,T_IGNORE);
                    break;

    case "()(&k)" :   settoken(scn,T_WHITESPACE);
                    break;

    case "}" :      settoken(scn,T_GRACEEND);
                    stategoto(scn,S_TUNE);
                    break;

    case "&((<+=^_=>)(<*d>)(<*=/>)(<*d>)&)(<=A-Ga-g>)(<*=,'>)(<*d>)(<*=/>)(<*d>)" :
    case "(<*=^_=>)(<*d>)(<*=/>)(<*d>)(<=A-Ga-g>)(<*=,'>)(<*d>)(<*=/>)(<*d>)" :
                    settoken(scn,T_NOTE);
                    break;

    case "(<?=.>)&)" :      settoken(scn,T_SLUREND);
                    break;

    case "(<?=.>)&((<?=',>)" :settoken(scn,T_SLURSTART);
                    break;

    case "(((<=.H-Wh-w~>)))" :
                    settoken(scn,T_USERSYMBOL);
                    break;

    case "+(<+!=+ \t\n\r|[:]>)+":
    case "!(<+!=! \t\n\r|[:]>)!":
                    settoken(scn,T_DECORATION);
                    adjustdeco();
                    break;

    case "[" :      settoken(scn,T_CHORD);
                    stategosub(scn,S_CHORD);
                    break;

    case "\f&N" :
                    settoken(scn,T_CONTINUE);
                    break;

    case "&n" :     settoken(scn,T_ENDLINE);
                    break;

    case "()(<.>)" :    settoken(scn,T_UNKNOWN);
                    break;

  }

  return scn->tok;
}

static abcToken abc_chord(abcScanner *scn)
{
  switch pmx(scn->cur) {
    case "()(<+=`>)": settoken(scn,T_IGNORE);
                    break;

    case "()(&k)" :   settoken(scn,T_WHITESPACE);
                    break;

    case "](<*d>)(<*=/>)(<*d>)" :
                    settoken(scn,T_CHORDEND);
                    statereturn(scn);
                    _dbgmsg("state: %04X next: %04X\n",scn->state,scn->nextstate);
                    break;

    case "&((<+=^_=>)&)(<*d>)(<*=/>)(<*d>)(<=A-Ga-g>)()(<*d>)(<*=/>)(<*d>)" :
    case "(<*=^_=>)(<*d>)(<*=/>)(<*d>)(<=A-Ga-g>)()(<*d>)(<*=/>)(<*d>)" :
                    settoken(scn,T_NOTE);
                    break;

    case "(((<=.H-Wh-w~>)))" :
                    settoken(scn,T_USERSYMBOL);
                    break;

    case "+(<+!=+ \t\n\r|[:]>)+":
    case "!(<+!=! \t\n\r|[:]>)!":
                    settoken(scn,T_DECORATION);
                    adjustdeco();
                    break;

    case "(<?=.>)&((<?=',>)" :
                    settoken(scn,T_SLURSTART);
                    break;

    case "(<?=.>)&)" :
                    settoken(scn,T_SLUREND);
                    break;
    case "\f&N" :
                    settoken(scn,T_CONTINUE);
                    break;

    case "&n" :     settoken(scn,T_ENDLINE);
                    break;

    case "()(<.>)" :    settoken(scn,T_UNKNOWN);
                    break;

  }

  return scn->tok;
}

static abcToken abc_history(abcScanner *scn)
{
  skip_token:
  switch pmx(scn->cur) {

    case "\b&K(H):&K(&L)(&n)" :
                    if (pmx(Len,1) == 0) {
                      settoken(scn,T_ENDTEXT);
                      statereturn(scn);
                    }
                    else
                      settoken(scn,T_TEXT);
                    break;

    case "\b&K()(I):&K((<*S>)&K(&L))&n" :
    case "\b&K()(U):&K((<.>)&K=&K&e\\(&q)&L)&n" :
    case "\b&K()(U):&K((<.>)&K=&K(<+S>)&L)&n" :
    case "\b&K()(<a>):&K(&L)&n" :
                    settoken(scn,T_FIELD);
                    statereturn(scn);
                    break;

    case "\b" :     goto skip_token;

    case "()&K(&L)(&n)" :
                    settoken(scn,T_TEXT);
                    break;
    case "()(<.>)" :
                    settoken(scn,T_TEXT);
                    break;
  }

  return scn->tok;
}

static abcToken abc_text_ps(abcScanner *scn)
{
  skip_token:
  switch pmx(scn->cur) {

    case "\b&K%%&Kend(ps)&K(&L)(&n)" :
                    settoken(scn,T_ENDTEXT);
                    statereturn(scn);
                    break;

    case "\b" :     goto skip_token;

    case "()(&L)(&n)" :
                    settoken(scn,T_TEXT);
                    break;
    case "()(<.>)" :
                    settoken(scn,T_TEXT);
                    break;
  }
  return scn->tok;
}

static abcToken abc_text(abcScanner *scn)
{
  skip_token:
  switch pmx(scn->cur) {

    case "\b&K%%&Kend(text)&K(&L)(&n)" :
                    settoken(scn,T_ENDTEXT);
                    statereturn(scn);
                    break;

    case "\b" :     goto skip_token;

    case "&K(<?=%><?=%>)&K(&L)(&n)" :
                    settoken(scn,T_TEXT);
                    break;
    case "()(<.>)" :
                    settoken(scn,T_TEXT);
                    break;
  }
  return scn->tok;
}

abcToken abcNextToken(abcScanner *scn)
{
  int k;
  
  if (scn == NULL) return T_EOF;
  
  for (k=0; k< abc_MAXTOKSTR; k++)
    scn->tok_str[k][0] = scn->tok_str[k][1] = NULL;
     
  scn->lasttok = scn->tok;
  abcClrFlag(scn,ABC_F_ONETIMERS);

  if (scn->nextstate != S_NONE && scn->nextstate < S_MAXSTATE) {
    scn->state = scn->nextstate;
    scn->nextstate = S_NONE;
  }

  if (scn->state == S_EOF) return T_EOF;

  if (!scn->cur || !*scn->cur)
    getnewline(scn);

  if (scn->cur && *scn->cur) {
    switch (abcStateCurrent(scn)) {
      case S_LIMBO    : return abc_limbo(scn);
      case S_HEADER   : return abc_header(scn);
      case S_TUNE     : return abc_tune(scn);
      case S_GRACE    : return abc_grace(scn);
      case S_CHORD    : return abc_chord(scn);
      case S_LYRICS   : return abc_lyrics(scn);
      case S_SYMBOLS  : return abc_symbols(scn);
      case S_HISTORY  : return abc_history(scn);
      case S_TEXT_PS  : return abc_text_ps(scn);
      case S_TEXT     : return abc_text(scn);
    }
  }

  if (scn->saved != NULL) {
    abcScanner tmp;
    tmp = *scn->saved;
    scn->saved->saved = NULL;
    abcScannerFree(scn->saved);
    *scn = tmp;
    scn->tok = T_INCLUDEEND;
    for (k=0; k< abc_MAXTOKSTR; k++)
      scn->tok_str[k][0] = scn->tok_str[k][1] = NULL;   
    return T_INCLUDEEND;
  }
  
  scn->nextstate = S_EOF;
  return T_EOF;
}

char *abcTokenStart(abcScanner *scn, int strnum)
{
  if (strnum < 0 || abc_MAXTOKSTR <= strnum || scn->tok_str[strnum][0] == NULL ||
      (scn->tok_str[strnum][0] >= scn->tok_str[strnum][1]))
    return utlEmptyString;
  return scn->tok_str[strnum][0];
}

char *abcTokenEnd(abcScanner *scn, int strnum)
{
  if (strnum < 0 || abc_MAXTOKSTR <= strnum || scn->tok_str[strnum][0] == NULL ||
      (scn->tok_str[strnum][0] >= scn->tok_str[strnum][1]))
    return utlEmptyString;
  return scn->tok_str[strnum][1];
}

int abcTokenLen(abcScanner *scn, int strnum)
{
  int len = 0;
  if (0 <= strnum && strnum < abc_MAXTOKSTR && scn->tok_str[strnum][0]) {
    len = scn->tok_str[strnum][1] - scn->tok_str[strnum][0];
    if (len < 0) len = 0;
  }
  return len;
}

char *abcScannerGetIncludePath(abcScanner *scn)
{
  return (scn->incpath && *scn->incpath) ? scn->incpath : "?";
}

char *abcScannerSetIncludePath(abcScanner *scn,char *path)
{
  scn->incpath = chsCpy(scn->incpath,path);
  return scn->incpath ;
}

char *abcScannerAddToIncludePath(abcScanner *scn,char *path)
{
  scn->incpath = chsAddStr(scn->incpath,path);
  return scn->incpath ;
}

char *abcIncludePathStart(abcScanner *scn)
{
  if (abcToken(scn) != T_INCLUDEPATH) return utlEmptyString;
  return (abcTokenStart(scn,2)+1) ;  
}

int abcIncludePathLen(abcScanner *scn)
{
  if (abcToken(scn) != T_INCLUDEPATH) return 0;
  return (abcTokenLen(scn,2)-2) ;  
}

int abcIncludePathAdding(abcScanner *scn)
{
  if (abcToken(scn) != T_INCLUDEPATH) return 0;
  return (abcTokenLen(scn,1)) ;  
}

char *abcIncludePathSet(abcScanner *scn)
{
  if (abcToken(scn) == T_INCLUDEPATH && abcTokenLen(scn,2) > 2) {
    scn->incpath = chsAddChr(scn->incpath,';');
    if (abcTokenLen(scn,1) > 0)
      scn->incpath = chsAddStrL(scn->incpath, abcTokenStart(scn,2)+1,abcTokenLen(scn,2)-2);
    else
      scn->incpath = chsCpyL(scn->incpath, abcTokenStart(scn,2)+1,abcTokenLen(scn,2)-2);
  }  
  return scn->incpath;
}

int abcInclude(abcScanner *scn)
{
  abcScanner *save = NULL;
  abcScanner tmp;
  chs_t fname = NULL;
  chs_t pname = NULL;
  int ret = 0;
  int len;
  int c;
  
  if (abcToken(scn) == T_INCLUDE) {
    if ((len = abcTokenLen(scn,1)) > 0)
      fname = chsCpyL(fname,abcTokenStart(scn,1)+1,len-2);
    else if ( (len = abcTokenLen(scn,2)) > 0)
      fname = chsCpyL(fname,abcTokenStart(scn,2),len);
    else return 0;
    
    
    /* {{ handle the include path */

    pname = chsCpy(pname,abcScannerGetIncludePath(scn));
    pname = chsSubStr(pname,0,">?",fname);
    
    _dbgmsg("including: %s\n",pname);
    ret = 1;
    while (save == NULL && ret == 1) {
      switch pmx(pname) {
        case "<+!;>" :  c = *pmx(End,0);
                        *pmx(End,0) = '\0';
                        _dbgmsg("trying: %s\n",pmx(Start,0));
                        save = abcScannerNew(file,pmx(Start,0));           
                        *pmx(End,0) = c;
                        break;
                        
        case ";"     :  break;
        
        default      :  ret = 0;
      }
    }
   
   
    /* }} */
    
    if (save != NULL) {
      save->nextstate = scn->state;
      if (scn->incpath) save->incpath = chsDup(scn->incpath);
      tmp = *scn;
      *scn = *save;
      *save = tmp;
      scn->saved = save;
      ret = 1;               
    }      
    fname = chsFree(fname);
    pname = chsFree(pname);
  }
  return ret;
}
